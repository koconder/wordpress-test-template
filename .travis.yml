# Travis CI Configuration file
# @link https://travis-ci.org/
language: php
dist: trusty
sudo: false

notifications:
  on_success: never
  on_failure: change
  email: false

cache:
  bundler: true
  apt: true
  directories:
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files

env:
  global:
    - PATH=~/.composer/vendor/bin:vendor/bin:$PATH
    - WP_PROJECT_TYPE=plugin
    - WP_VERSION=latest
    - WP_MULTISITE=0
    - WP_TEST_URL=http://localhost:12000
    - WP_TEST_USER=test
    - WP_TEST_USER_PASS=test

php:
  - 5.4
  - 5.5
  - 5.6
  - 7.0
  - 7.1
  - 7.2
  - 7.3
  - nightly

matrix:
  fast_finish: true
  include:
    - php: '7.3'
      env: 
        - SNIFF=1
        
  allow_failures:
    - php: nightly

before_script:
  # Increase PHP Memory
  - echo "memory_limit=2048M" >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
  
  # Speed up build time by disabling Xdebug.
  # https://johnblackbourn.com/reducing-travis-ci-build-times-for-wordpress-projects/
  # https://twitter.com/kelunik/status/954242454676475904
  - if [ "$TRAVIS_PHP_VERSION" != "5.6" ]; then phpenv config-rm xdebug.ini || echo 'No xdebug config.'; fi

  # Install composer packages before trying to activate themes or plugins
  - composer self-update
  - composer install
  - phpenv rehash

  # Reconfigure PHPUnit Testing for Travis CI using older version
  # https://core.trac.wordpress.org/ticket/43218
  # https://make.wordpress.org/core/handbook/testing/automated-testing/phpunit/#running-the-test-suite
  - phpenv config-rm xdebug.ini || echo 'No xdebug config.'
  - export XMLLINT_INDENT="	"
  - export PHPUNIT_DIR=/tmp/phpunit
  - composer require squizlabs/php_codesniffer:${PHPCS_BRANCH} --update-no-dev --no-suggest --no-scripts
  - |
    if [[ "$SNIFF" == "1" ]]; then
        composer install --dev --no-suggest
        # The `dev` required DealerDirect Composer plugin takes care of the installed_paths.
    else
        # The above require already does the install.
        $(pwd)/vendor/bin/phpcs --config-set installed_paths $(pwd)
    fi

  # Install Wordpress testing suite and run wordpress
  - git clone https://github.com/koconder/wordpress-test-template wp-tests
  - bash wp-tests/bin/install-wp-tests.sh test root '' localhost $WP_VERSION

script:
  # Run PHP Unit and Wordpress Standards Tests
  #- phpunit --coverage-clover=coverage.xml
  
  # Run rspec tests
  #- cd wp-tests/spec && bundle exec rspec baseline.rb

  # Syntax check all php files and fail for any error text in STDERR
  - '! find . -type f -name "*.php" -exec php -d error_reporting=32767 -l {} \; 2>&1 >&- | grep "^"'

  # Run the unit tests.
  - phpunit --filter WordPress --bootstrap="$(pwd)/vendor/squizlabs/php_codesniffer/tests/bootstrap.php" $(pwd)/vendor/squizlabs/php_codesniffer/tests/AllTests.php
  # Test for fixer conflicts by running the auto-fixers of the complete WPCS over the test case files.
  # This is not an exhaustive test, but should give an early indication for typical fixer conflicts.
  # For the first run, the exit code will be 1 (= all fixable errors fixed).
  # `travis_retry` should then kick in to run the fixer again which should now return 0 (= no fixable errors found).
  # All error codes for the PHPCBF: https://github.com/squizlabs/PHP_CodeSniffer/issues/1270#issuecomment-272768413
  - if [[ "$SNIFF" == "1" ]]; then travis_retry $(pwd)/vendor/bin/phpcbf -p ./WordPress/Tests/ --standard=WordPress --extensions=inc --exclude=Generic.PHP.Syntax --report=summary; fi
  # Make sure the rulesets don't thrown unexpected errors or warnings.
  # This check needs to be run against a high PHP version to prevent triggering the syntax error check.
  # It also needs to be run against all PHPCS versions WPCS is tested against.
  - if [[ $TRAVIS_PHP_VERSION == "7.1" ]]; then $(pwd)/vendor/bin/phpcs -s ./bin/class-ruleset-test.php --standard=WordPress-Core; fi
  - if [[ $TRAVIS_PHP_VERSION == "7.1" ]]; then $(pwd)/vendor/bin/phpcs -s ./bin/class-ruleset-test.php --standard=WordPress-Docs; fi
  - if [[ $TRAVIS_PHP_VERSION == "7.1" ]]; then $(pwd)/vendor/bin/phpcs -s ./bin/class-ruleset-test.php --standard=WordPress-Extra; fi
  - if [[ $TRAVIS_PHP_VERSION == "7.1" ]]; then $(pwd)/vendor/bin/phpcs -s ./bin/class-ruleset-test.php --standard=WordPress; fi
  # WordPress Coding Standards.
  # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
  # @link http://pear.php.net/package/PHP_CodeSniffer/
  - if [[ "$SNIFF" == "1" ]]; then $(pwd)/vendor/bin/phpcs --runtime-set ignore_warnings_on_exit 1; fi
  # Validate the xml files.
  # @link http://xmlsoft.org/xmllint.html
  - if [[ "$SNIFF" == "1" ]]; then xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./*/ruleset.xml; fi
  - if [[ "$SNIFF" == "1" ]]; then xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./phpcs.xml.dist.sample; fi
  # Check the code-style consistency of the xml files.
  - if [[ "$SNIFF" == "1" ]]; then diff -B --tabsize=4 ./WordPress/ruleset.xml <(xmllint --format "./WordPress/ruleset.xml"); fi
  - if [[ "$SNIFF" == "1" ]]; then diff -B --tabsize=4 ./WordPress-Core/ruleset.xml <(xmllint --format "./WordPress-Core/ruleset.xml"); fi
  - if [[ "$SNIFF" == "1" ]]; then diff -B --tabsize=4 ./WordPress-Docs/ruleset.xml <(xmllint --format "./WordPress-Docs/ruleset.xml"); fi
  - if [[ "$SNIFF" == "1" ]]; then diff -B --tabsize=4 ./WordPress-Extra/ruleset.xml <(xmllint --format "./WordPress-Extra/ruleset.xml"); fi
  - if [[ "$SNIFF" == "1" ]]; then diff -B --tabsize=4 ./phpcs.xml.dist.sample <(xmllint --format "./phpcs.xml.dist.sample"); fi
  # Validate the composer.json file.
  # @link https://getcomposer.org/doc/03-cli.md#validate
  - if [[ "$LINT" == "1" ]]; then composer validate --no-check-all --strict; fi


after_success:
  - wget https://scrutinizer-ci.com/ocular.phar
  - php ocular.phar code-coverage:upload --format=php-clover coverage.xml
  - bash <(curl -s https://codecov.io/bash)